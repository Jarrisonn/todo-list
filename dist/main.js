(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"*,*::before,*::after{\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n}\r\n.project-container{\r\n    font-family: 'Open Sans';\r\n    font-size: 2.5rem;\r\n    margin-top: 1.5rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 5rem;\r\n    flex-direction: column;\r\n}\r\n\r\n#project-list{\r\n    display:flex;\r\n    gap: 10rem;\r\n}\r\n\r\n.selected{\r\n    background-color: green;\r\n}\r\nbutton{\r\n    font-family: 'Open Sans';\r\n    padding: 1rem 2rem;\r\n    border-radius: 10px;\r\n    border: 3px solid rebeccapurple;\r\n}\r\nform{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.red{\r\n    background-color: rgb(187, 38, 38);\r\n}\r\n\r\n.yellow{\r\n    background-color: rgb(212, 212, 60);\r\n}\r\n\r\n.green{\r\n    background-color: rgb(48, 112, 48);\r\n}\r\n.todo-container{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.todo{\r\n    font-family: 'Open Sans';\r\n    font-size: 1.5rem;\r\n    text-align: center;\r\n    margin: 1rem;\r\n    min-width: 450px;\r\n    min-height: 160px;\r\n    padding: 3rem 2rem; \r\n    border-radius: 10%;   \r\n}\r\n.todo > :nth-child(1){\r\n    margin-bottom: 20px;\r\n    font-size: 3rem;\r\n}\r\n.hidden{\r\n    width:0;\r\n    height:0;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;;AAEd;AACA;IACI,wBAAwB;IACxB,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,mBAAmB;IACnB,+BAA+B;AACnC;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,kCAAkC;AACtC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,kCAAkC;AACtC;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;AACA;IACI,wBAAwB;IACxB,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,eAAe;AACnB;AACA;IACI,OAAO;IACP,QAAQ;AACZ",sourcesContent:["*,*::before,*::after{\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n}\r\n.project-container{\r\n    font-family: 'Open Sans';\r\n    font-size: 2.5rem;\r\n    margin-top: 1.5rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 5rem;\r\n    flex-direction: column;\r\n}\r\n\r\n#project-list{\r\n    display:flex;\r\n    gap: 10rem;\r\n}\r\n\r\n.selected{\r\n    background-color: green;\r\n}\r\nbutton{\r\n    font-family: 'Open Sans';\r\n    padding: 1rem 2rem;\r\n    border-radius: 10px;\r\n    border: 3px solid rebeccapurple;\r\n}\r\nform{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.red{\r\n    background-color: rgb(187, 38, 38);\r\n}\r\n\r\n.yellow{\r\n    background-color: rgb(212, 212, 60);\r\n}\r\n\r\n.green{\r\n    background-color: rgb(48, 112, 48);\r\n}\r\n.todo-container{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.todo{\r\n    font-family: 'Open Sans';\r\n    font-size: 1.5rem;\r\n    text-align: center;\r\n    margin: 1rem;\r\n    min-width: 450px;\r\n    min-height: 160px;\r\n    padding: 3rem 2rem; \r\n    border-radius: 10%;   \r\n}\r\n.todo > :nth-child(1){\r\n    margin-bottom: 20px;\r\n    font-size: 3rem;\r\n}\r\n.hidden{\r\n    width:0;\r\n    height:0;\r\n}\r\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a=[],i=!0,c=!1;try{for(t=t.call(e);!(i=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(c)throw o}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),d="/*# ".concat(s," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([d]).join("\n")}return[a].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var m=t(u),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==m?(n[m].references++,n[m].updater(p)):n.push({identifier:u,updater:o(p,r),references:1}),i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=t(a[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),d=t(216),l=t.n(d),u=t(589),m=t.n(u),p=t(426),A={};A.styleTagTransform=m(),A.setAttributes=s(),A.insert=i().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=l(),n()(p.Z,A),p.Z&&p.Z.locals&&p.Z.locals;const f=document.querySelector(".project-container"),h=document.querySelector(".todo-container"),C=document.querySelector(".create-todo");class g{constructor(e,n,t,r,o,a,i){this.title=e,this.description=n,this.creationDate=t,this.dueDate=r,this.priority=o,this.status=a,this.project=i}changeStatus(){this.status=!this.status}}class b{constructor(e,n,t){this.name=e,this.todosList=n,this.selected=t}select(){this.selected=!0,w(),I()}deSelect(){this.selected=!1}}const v=new g("Title","desc",new Date,"Monday 10th","2",!0,"default"),y=new g("Title1","desc1",new Date,"Tuesday 11th","5",!1,"secondList"),B=new g("Title2","desc1",new Date,"Tuesday 11th","8",!1,"thirdList");let x=[new b("default",[v],!0),new b("secondProject",[y,v,v],!1),new b("thirdProject",[B],!1)];const I=()=>{x.forEach((e=>{!0===e.selected&&e.todosList.forEach((n=>{const t=document.createElement("ul"),r=document.createElement("h2"),o=document.createElement("h3"),a=document.createElement("h3"),i=document.createElement("h3"),c=document.createElement("h3"),s=document.createElement("button");console.log(n.project),s.innerHTML='<i class="fas fa-trash"></i>',s.addEventListener("click",(()=>{E(),T(e,n)})),r.innerText=n.title,t.addEventListener("mouseenter",(()=>{o.innerText=n.description,a.innerText=n.dueDate})),t.addEventListener("mouseleave",(()=>{o.innerText="",a.innerText=""})),t.addEventListener("click",(()=>{o.innerText=n.description,a.innerText=n.dueDate})),!1===n.status?c.innerHTML='Todo Status: Incomplete <i class="fas fa-times-circle"></i>':c.innerHTML='Todo Status: Complete <i class="fas fa-check-square"></i>',c.addEventListener("click",(()=>{n.changeStatus(),w(),I()})),i.innerText=n.priority,n.priority<=3?t.classList.add("red"):n.priority>4&&n.priority<7?t.classList.add("yellow"):n.priority>=8&&t.classList.add("green"),t.classList.add("todo"),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),t.appendChild(c),t.appendChild(s),h.appendChild(t)}))}))};I();const E=()=>{document.querySelector(".todo").remove()},T=(e,n)=>{if(console.log(n),console.log(e),e.todosList.includes(n)){let t=e.todosList.indexOf(n);e.todosList.splice(t,1),w(),I()}},w=()=>{h.innerHTML=""},L=()=>{f.innerHTML="";const e=document.createElement("ul");e.classList.add("project-list"),x.forEach((n=>{const t=document.createElement("h2");t.innerText=n.name,e.appendChild(t),f.appendChild(e),n.selected?t.classList.add("selected"):n.selected||t.classList.remove("selected")}))};L();const S=()=>{const e=document.querySelector(".project-list");e.addEventListener("click",(n=>{e.childNodes.forEach((e=>{e.classList.remove("selected")})),n.target.classList.add("selected"),j(n.target.innerText),k(n.target.innerText)}))};S();const k=e=>{x.forEach((n=>{e===n.name?n.select():e!==n.name&&n.deSelect()}))},j=e=>{x.forEach((n=>{e!==n.name&&n.deSelect()}))},M=()=>{const e=document.createElement("button");e.innerText="Create a new Project!",e.addEventListener("click",(()=>{const e=document.createElement("form"),n=document.createElement("input"),t=document.createElement("label"),r=document.createElement("button");t.htmlFor="name",t.innerText="Please enter a name for your project \n",n.name="name",r.innerText="Submit",e.appendChild(t),e.appendChild(n),e.appendChild(r),h.appendChild(e),r.addEventListener("click",(e=>{e.preventDefault(),O(n.value)}))})),f.appendChild(e)};M();const O=e=>{const n=new b(e,[],!1);x.push(n),console.log(x),L(),S(),M()};(()=>{const e=document.createElement("button");e.innerText="Add a new todo!",e.addEventListener("click",(()=>{h.classList.add("hidden"),document.querySelector(".todo").remove();const e=document.createElement("form"),n=document.createElement("input"),t=document.createElement("label");t.innerText="Please enter a title for the todo";const r=document.createElement("input"),o=document.createElement("label");o.innerText="Please enter a description of the todo";const a=document.createElement("input");a.type="date";const i=document.createElement("label");i.innerText="Please enter the due date of the todo";const c=document.createElement("input");c.type="range",c.min="1",c.max="10";const s=document.createElement("label");s.innerText="Please enter the priority of the todo from 1 to 10, 1 being most important with 10 being least important";const d=document.createElement("input"),l=document.createElement("label");l.innerText="Please enter the name of the project for the todo to go on ";const u=document.createElement("button");u.innerText="Submit new Todo!",u.addEventListener("click",(t=>{t.preventDefault(),P(n.value,r.value,a.valueAsDate,c.value,d.value),C.removeChild(e),h.classList.remove("hidden"),w(),I()})),e.appendChild(t),e.appendChild(n),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(a),e.appendChild(s),e.appendChild(c),e.appendChild(l),e.appendChild(d),e.appendChild(u),C.appendChild(e)})),C.appendChild(e)})();const P=(e,n,t,r,o)=>{const a=new g(e,n,new Date,t,r,!1,o);x.forEach((e=>{e.name===o&&e.todosList.push(a)})),console.log(x),w(),I()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QmhLLE9BRW5CMkcsRUFBb0J6QixZQUFZNkUsR0FDaENyRCxFQUFjc0MsVUFBVTdGLE9BQU8sVUFDL0JzRSxJQUNBQyxPQUlGcUMsRUFBS3hGLFlBQVlpRyxHQUNqQlQsRUFBS3hGLFlBQVlnRyxHQUNqQlIsRUFBS3hGLFlBQVltRyxHQUNqQlgsRUFBS3hGLFlBQVlrRyxHQUNqQlYsRUFBS3hGLFlBQVlzRyxHQUNqQmQsRUFBS3hGLFlBQVlvRyxHQUNqQlosRUFBS3hGLFlBQVkwRyxHQUNqQmxCLEVBQUt4RixZQUFZdUcsR0FDakJmLEVBQUt4RixZQUFZMEYsR0FDakJGLEVBQUt4RixZQUFZeUYsR0FDakJELEVBQUt4RixZQUFZMkcsR0FDakJ2RSxFQUFvQnBDLFlBQVl3RixNQUdsQ3BELEVBQW9CcEMsWUFBWStGLElBRWxDZSxHQUVBLE1BQU1GLEVBQWEsQ0FBQ3RFLEVBQU9DLEVBQWFFLEVBQVNDLEVBQVUyQyxLQUN6RCxNQUFNMUIsRUFBTyxJQUFJdEIsRUFDZkMsRUFDQUMsRUFDQSxJQUFJZSxLQUNKYixFQUNBQyxHQUNBLEVBQ0EyQyxHQUVGNUIsRUFBWUMsU0FBU2QsSUFDZkEsRUFBUXpHLE9BQVNrSixHQUNuQnpDLEVBQVFHLFVBQVU1SixLQUFLd0ssTUFHM0JPLFFBQVFDLElBQUlWLEdBQ1pQLElBQ0FDLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosKjo6YmVmb3JlLCo6OmFmdGVye1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIFxcclxcbn1cXHJcXG4ucHJvamVjdC1jb250YWluZXJ7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXHJcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxyXFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDVyZW07XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbiNwcm9qZWN0LWxpc3R7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgZ2FwOiAxMHJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdGVke1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXHJcXG59XFxyXFxuYnV0dG9ue1xcclxcbiAgICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAzcHggc29saWQgcmViZWNjYXB1cnBsZTtcXHJcXG59XFxyXFxuZm9ybXtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuLnJlZHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4NywgMzgsIDM4KTtcXHJcXG59XFxyXFxuXFxyXFxuLnllbGxvd3tcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxMiwgMjEyLCA2MCk7XFxyXFxufVxcclxcblxcclxcbi5ncmVlbntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDQ4LCAxMTIsIDQ4KTtcXHJcXG59XFxyXFxuLnRvZG8tY29udGFpbmVye1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuLnRvZG97XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXHJcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgbWFyZ2luOiAxcmVtO1xcclxcbiAgICBtaW4td2lkdGg6IDQ1MHB4O1xcclxcbiAgICBtaW4taGVpZ2h0OiAxNjBweDtcXHJcXG4gICAgcGFkZGluZzogM3JlbSAycmVtOyBcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTAlOyAgIFxcclxcbn1cXHJcXG4udG9kbyA+IDpudGgtY2hpbGQoMSl7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogM3JlbTtcXHJcXG59XFxyXFxuLmhpZGRlbntcXHJcXG4gICAgd2lkdGg6MDtcXHJcXG4gICAgaGVpZ2h0OjA7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFVBQVU7O0FBRWQ7QUFDQTtJQUNJLHdCQUF3QjtJQUN4QixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSx3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQiwrQkFBK0I7QUFDbkM7QUFDQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7QUFDQTtJQUNJLGtDQUFrQztBQUN0Qzs7QUFFQTtJQUNJLG1DQUFtQztBQUN2Qzs7QUFFQTtJQUNJLGtDQUFrQztBQUN0QztBQUNBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSx3QkFBd0I7SUFDeEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksT0FBTztJQUNQLFFBQVE7QUFDWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqLCo6OmJlZm9yZSwqOjphZnRlcntcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBcXHJcXG59XFxyXFxuLnByb2plY3QtY29udGFpbmVye1xcclxcbiAgICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxyXFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcclxcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA1cmVtO1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4jcHJvamVjdC1saXN0e1xcclxcbiAgICBkaXNwbGF5OmZsZXg7XFxyXFxuICAgIGdhcDogMTByZW07XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RlZHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxufVxcclxcbmJ1dHRvbntcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHJlYmVjY2FwdXJwbGU7XFxyXFxufVxcclxcbmZvcm17XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcbi5yZWR7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODcsIDM4LCAzOCk7XFxyXFxufVxcclxcblxcclxcbi55ZWxsb3d7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTIsIDIxMiwgNjApO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JlZW57XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig0OCwgMTEyLCA0OCk7XFxyXFxufVxcclxcbi50b2RvLWNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcbi50b2Rve1xcclxcbiAgICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbjogMXJlbTtcXHJcXG4gICAgbWluLXdpZHRoOiA0NTBweDtcXHJcXG4gICAgbWluLWhlaWdodDogMTYwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDNyZW0gMnJlbTsgXFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwJTsgICBcXHJcXG59XFxyXFxuLnRvZG8gPiA6bnRoLWNoaWxkKDEpe1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcclxcbiAgICBmb250LXNpemU6IDNyZW07XFxyXFxufVxcclxcbi5oaWRkZW57XFxyXFxuICAgIHdpZHRoOjA7XFxyXFxuICAgIGhlaWdodDowO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoc3R5bGUsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGUpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGNvbXBhcmVBc2MsIGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xyXG5cclxuY29uc3QgcHJvamVjdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1jb250YWluZXJcIik7XHJcbmNvbnN0IHRvZG9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG8tY29udGFpbmVyXCIpO1xyXG5jb25zdCBjcmVhdGVUb2RvQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jcmVhdGUtdG9kb1wiKTtcclxuY2xhc3MgVG9kbyB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0aXRsZSxcclxuICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgY3JlYXRpb25EYXRlLFxyXG4gICAgZHVlRGF0ZSxcclxuICAgIHByaW9yaXR5LFxyXG4gICAgc3RhdHVzLFxyXG4gICAgcHJvamVjdFxyXG4gICkge1xyXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgdGhpcy5jcmVhdGlvbkRhdGUgPSBjcmVhdGlvbkRhdGU7XHJcbiAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xyXG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xyXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xyXG4gIH1cclxuICBjaGFuZ2VTdGF0dXMoKSB7XHJcbiAgICAvL2lmIHN0YXR1cyBpcyB0cnVlLCB0b2RvIGlzIGNvbXBsZXRlXHJcbiAgICB0aGlzLnN0YXR1cyA9ICF0aGlzLnN0YXR1cztcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFByb2plY3Qge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUsIHRvZG9zTGlzdCwgc2VsZWN0ZWQpIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLnRvZG9zTGlzdCA9IHRvZG9zTGlzdDtcclxuICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICB9XHJcblxyXG4gIHNlbGVjdCgpIHtcclxuICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgY2xlYXJUb2RvRG9tKCk7XHJcbiAgICBzaG93VG9kb0RvbSgpO1xyXG4gIH1cclxuICBkZVNlbGVjdCgpIHtcclxuICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG5ld1RvZG8gPSBuZXcgVG9kbyhcclxuICBcIlRpdGxlXCIsXHJcbiAgXCJkZXNjXCIsXHJcbiAgbmV3IERhdGUoKSxcclxuICBcIk1vbmRheSAxMHRoXCIsXHJcbiAgXCIyXCIsXHJcbiAgdHJ1ZSxcclxuICBcImRlZmF1bHRcIlxyXG4pO1xyXG5jb25zdCBuZXdUb2RvMSA9IG5ldyBUb2RvKFxyXG4gIFwiVGl0bGUxXCIsXHJcbiAgXCJkZXNjMVwiLFxyXG4gIG5ldyBEYXRlKCksXHJcbiAgXCJUdWVzZGF5IDExdGhcIixcclxuICBcIjVcIixcclxuICBmYWxzZSxcclxuICBcInNlY29uZExpc3RcIlxyXG4pO1xyXG5jb25zdCBuZXdUb2RvMiA9IG5ldyBUb2RvKFxyXG4gIFwiVGl0bGUyXCIsXHJcbiAgXCJkZXNjMVwiLFxyXG4gIG5ldyBEYXRlKCksXHJcbiAgXCJUdWVzZGF5IDExdGhcIixcclxuICBcIjhcIixcclxuICBmYWxzZSxcclxuICBcInRoaXJkTGlzdFwiXHJcbik7XHJcblxyXG5jb25zdCBkZWZhdWx0UHJvamVjdCA9IG5ldyBQcm9qZWN0KFxyXG4gICAgXCJkZWZhdWx0XCIsIFxyXG4gICAgW25ld1RvZG9dLCBcclxuICAgIHRydWVcclxuKTtcclxuY29uc3Qgc2Vjb25kUHJvamVjdCA9IG5ldyBQcm9qZWN0KFxyXG4gIFwic2Vjb25kUHJvamVjdFwiLFxyXG4gIFtuZXdUb2RvMSwgbmV3VG9kbywgbmV3VG9kb10sXHJcbiAgZmFsc2VcclxuKTtcclxuY29uc3QgdGhpcmRQcm9qZWN0ID0gbmV3IFByb2plY3QoXCJ0aGlyZFByb2plY3RcIiwgXHJcbltuZXdUb2RvMl0sIFxyXG5mYWxzZVxyXG4pO1xyXG5cclxubGV0IHByb2plY3RMaXN0ID0gW2RlZmF1bHRQcm9qZWN0LCBzZWNvbmRQcm9qZWN0LCB0aGlyZFByb2plY3RdO1xyXG5cclxuY29uc3Qgc2hvd1RvZG9Eb20gPSAoKSA9PiB7XHJcbiAgcHJvamVjdExpc3QuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xyXG4gICAgaWYgKHByb2plY3Quc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgcHJvamVjdC50b2Rvc0xpc3QuZm9yRWFjaCgodG9kbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XHJcbiAgICAgICAgY29uc3QgdG9kb1RpdGxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XHJcbiAgICAgICAgY29uc3QgdG9kb0Rlc2NFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcclxuICAgICAgICBjb25zdCB0b2RvRHVlRGF0ZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xyXG4gICAgICAgIGNvbnN0IHRvZG9Qcmlvcml0eUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xyXG4gICAgICAgIGNvbnN0IHRvZG9TdGF0dXNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcclxuICAgICAgICBjb25zdCBkZWxldGVCdG5FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2codG9kby5wcm9qZWN0KTtcclxuICAgICAgICBkZWxldGVCdG5FbC5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+YFxyXG4gICAgICAgIGRlbGV0ZUJ0bkVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlbW92ZVRvZG9Eb20oKTtcclxuICAgICAgICAgICAgcmVtb3ZlVG9kbyhwcm9qZWN0LCB0b2RvKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0b2RvVGl0bGVFbC5pbm5lclRleHQgPSB0b2RvLnRpdGxlO1xyXG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0b2RvRGVzY0VsLmlubmVyVGV4dCA9IHRvZG8uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIHRvZG9EdWVEYXRlRWwuaW5uZXJUZXh0ID0gdG9kby5kdWVEYXRlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRvZG9EZXNjRWwuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgdG9kb0R1ZURhdGVFbC5pbm5lclRleHQgPSBcIlwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRvZG9EZXNjRWwuaW5uZXJUZXh0ID0gdG9kby5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgdG9kb0R1ZURhdGVFbC5pbm5lclRleHQgPSB0b2RvLmR1ZURhdGU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZiAodG9kby5zdGF0dXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRvZG9TdGF0dXNFbC5pbm5lckhUTUwgPSBgVG9kbyBTdGF0dXM6IEluY29tcGxldGUgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXMtY2lyY2xlXCI+PC9pPmA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0b2RvU3RhdHVzRWwuaW5uZXJIVE1MID0gYFRvZG8gU3RhdHVzOiBDb21wbGV0ZSA8aSBjbGFzcz1cImZhcyBmYS1jaGVjay1zcXVhcmVcIj48L2k+YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vQ2hhbmdlIGZyb20gY29tcGxldGUgdG8gdW5jb21wbGV0ZSBcclxuICAgICAgICB0b2RvU3RhdHVzRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdG9kby5jaGFuZ2VTdGF0dXMoKTtcclxuICAgICAgICAgICAgY2xlYXJUb2RvRG9tKCk7XHJcbiAgICAgICAgICAgIHNob3dUb2RvRG9tKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICB0b2RvUHJpb3JpdHlFbC5pbm5lclRleHQgPSB0b2RvLnByaW9yaXR5O1xyXG4gICAgICAgIGlmICh0b2RvLnByaW9yaXR5IDw9IDMpIHtcclxuICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwicmVkXCIpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1lbHNlIGlmKHRvZG8ucHJpb3JpdHkgPiA0ICYmIHRvZG8ucHJpb3JpdHkgPCA3KXtcclxuICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwieWVsbG93XCIpXHJcbiAgICAgICAgfWVsc2UgaWYodG9kby5wcmlvcml0eSA+PSA4KXtcclxuICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiZ3JlZW5cIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcInRvZG9cIik7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQodG9kb1RpdGxlRWwpO1xyXG4gICAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQodG9kb0Rlc2NFbCk7XHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZCh0b2RvRHVlRGF0ZUVsKTtcclxuICAgICAgICBpdGVtLmFwcGVuZENoaWxkKHRvZG9Qcmlvcml0eUVsKTtcclxuICAgICAgICBpdGVtLmFwcGVuZENoaWxkKHRvZG9TdGF0dXNFbCk7XHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChkZWxldGVCdG5FbClcclxuICAgICAgICB0b2RvQ29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbnNob3dUb2RvRG9tKCk7XHJcblxyXG5jb25zdCByZW1vdmVUb2RvRG9tID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdG9kbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb1wiKVxyXG4gICAgdG9kby5yZW1vdmUoKTtcclxufVxyXG5jb25zdCByZW1vdmVUb2RvID0gKHByb2plY3QsIHRvZG8pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHRvZG8pO1xyXG4gICAgY29uc29sZS5sb2cocHJvamVjdCk7XHJcbiAgICBpZiAocHJvamVjdC50b2Rvc0xpc3QuaW5jbHVkZXModG9kbykpe1xyXG4gICAgICAgbGV0IGluZGV4ID0gcHJvamVjdC50b2Rvc0xpc3QuaW5kZXhPZih0b2RvKVxyXG4gICAgICAgcHJvamVjdC50b2Rvc0xpc3Quc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgICAgY2xlYXJUb2RvRG9tKCk7XHJcbiAgICAgICBzaG93VG9kb0RvbSgpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICBcclxuICAgXHJcbiAgIFxyXG4gICAgXHJcbn1cclxuXHJcbmNvbnN0IGNsZWFyVG9kb0RvbSA9ICgpID0+IHtcclxuICB0b2RvQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbn07XHJcbmNvbnN0IGNsZWFyUHJvamVjdERvbSA9ICgpID0+IHtcclxuICBwcm9qZWN0Q29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbn07XHJcblxyXG5jb25zdCBzaG93UHJvamVjdExpc3REb20gPSAoKSA9PiB7XHJcbiAgY2xlYXJQcm9qZWN0RG9tKCk7XHJcbiAgY29uc3QgcHJvamVjdExpc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcclxuICBwcm9qZWN0TGlzdEVsLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LWxpc3RcIik7XHJcbiAgcHJvamVjdExpc3QuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xyXG4gICAgY29uc3QgcHJvamVjdE5hbWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcclxuICAgIHByb2plY3ROYW1lRWwuaW5uZXJUZXh0ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgcHJvamVjdExpc3RFbC5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZUVsKTtcclxuICAgIHByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdExpc3RFbCk7XHJcbiAgICBpZiAocHJvamVjdC5zZWxlY3RlZCkge1xyXG4gICAgICBwcm9qZWN0TmFtZUVsLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcclxuICAgIH0gZWxzZSBpZiAoIXByb2plY3Quc2VsZWN0ZWQpIHtcclxuICAgICAgcHJvamVjdE5hbWVFbC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcbnNob3dQcm9qZWN0TGlzdERvbSgpO1xyXG5cclxuY29uc3Qgc2VsZWN0UHJvamVjdERvbSA9ICgpID0+IHtcclxuICBjb25zdCBwcm9qZWN0TGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWxpc3RcIik7XHJcbiAgcHJvamVjdExpc3RFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgIHByb2plY3RMaXN0RWwuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgfSk7XHJcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XHJcblxyXG4gICAgc2V0UHJvamVjdEFzRGVzZWxlY3RlZChlLnRhcmdldC5pbm5lclRleHQpO1xyXG4gICAgc2V0UHJvamVjdEFzU2VsZWN0ZWQoZS50YXJnZXQuaW5uZXJUZXh0KTtcclxuICB9KTtcclxufTtcclxuc2VsZWN0UHJvamVjdERvbSgpO1xyXG5cclxuY29uc3Qgc2V0UHJvamVjdEFzU2VsZWN0ZWQgPSAocHJvamVjdE5hbWUpID0+IHtcclxuICBwcm9qZWN0TGlzdC5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XHJcbiAgICBpZiAocHJvamVjdE5hbWUgPT09IHByb2plY3QubmFtZSkge1xyXG4gICAgICBwcm9qZWN0LnNlbGVjdCgpO1xyXG4gICAgfSBlbHNlIGlmIChwcm9qZWN0TmFtZSAhPT0gcHJvamVjdC5uYW1lKSB7XHJcbiAgICAgIHByb2plY3QuZGVTZWxlY3QoKTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IHNldFByb2plY3RBc0Rlc2VsZWN0ZWQgPSAocHJvamVjdE5hbWUpID0+IHtcclxuICBwcm9qZWN0TGlzdC5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XHJcbiAgICBpZiAocHJvamVjdE5hbWUgIT09IHByb2plY3QubmFtZSkge1xyXG4gICAgICBwcm9qZWN0LmRlU2VsZWN0KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVQcm9qZWN0RG9tID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNyZWF0ZVByb2plY3RCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gIGNyZWF0ZVByb2plY3RCdXR0b24uaW5uZXJUZXh0ID0gXCJDcmVhdGUgYSBuZXcgUHJvamVjdCFcIjtcclxuICBjcmVhdGVQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XHJcblxyXG4gICAgY29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGNvbnN0IHByb2plY3ROYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBjb25zdCBwcm9qZWN0U3VibWl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuXHJcbiAgICBwcm9qZWN0TmFtZUxhYmVsLmh0bWxGb3IgPSBcIm5hbWVcIjtcclxuICAgIHByb2plY3ROYW1lTGFiZWwuaW5uZXJUZXh0ID0gXCJQbGVhc2UgZW50ZXIgYSBuYW1lIGZvciB5b3VyIHByb2plY3QgXFxuXCI7XHJcbiAgICBwcm9qZWN0TmFtZUlucHV0Lm5hbWUgPSBcIm5hbWVcIjtcclxuXHJcbiAgICBwcm9qZWN0U3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU3VibWl0XCI7XHJcblxyXG4gICAgZm9ybS5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZUxhYmVsKTtcclxuICAgIGZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdE5hbWVJbnB1dCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKHByb2plY3RTdWJtaXRCdXR0b24pO1xyXG4gICAgdG9kb0NvbnRhaW5lci5hcHBlbmRDaGlsZChmb3JtKTtcclxuXHJcbiAgICBwcm9qZWN0U3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNyZWF0ZVByb2plY3QocHJvamVjdE5hbWVJbnB1dC52YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBwcm9qZWN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZVByb2plY3RCdXR0b24pO1xyXG59O1xyXG5jcmVhdGVQcm9qZWN0RG9tKCk7XHJcblxyXG5jb25zdCBjcmVhdGVQcm9qZWN0ID0gKG5hbWUpID0+IHtcclxuICBjb25zdCBwcm9qZWN0ID0gbmV3IFByb2plY3QobmFtZSwgW10sIGZhbHNlKTtcclxuICBwcm9qZWN0TGlzdC5wdXNoKHByb2plY3QpO1xyXG4gIGNvbnNvbGUubG9nKHByb2plY3RMaXN0KTtcclxuICBzaG93UHJvamVjdExpc3REb20oKTtcclxuICBzZWxlY3RQcm9qZWN0RG9tKCk7XHJcbiAgY3JlYXRlUHJvamVjdERvbSgpO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IGNyZWF0ZVRvZG9Eb20gPSAoKSA9PiB7XHJcbiAgICBcclxuICBjb25zdCBjcmVhdGVUb2RvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICBjcmVhdGVUb2RvQnV0dG9uLmlubmVyVGV4dCA9IFwiQWRkIGEgbmV3IHRvZG8hXCI7XHJcbiAgY3JlYXRlVG9kb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cclxuICAgIHRvZG9Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgIGNvbnN0IHRvZG9FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb1wiKVxyXG4gICAgdG9kb0VsLnJlbW92ZSgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XHJcblxyXG4gICAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGNvbnN0IHRpdGxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICB0aXRsZUxhYmVsLmlubmVyVGV4dCA9IFwiUGxlYXNlIGVudGVyIGEgdGl0bGUgZm9yIHRoZSB0b2RvXCI7XHJcblxyXG4gICAgY29uc3QgZGVzY3JpcHRpb25JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBkZXNjcmlwdGlvbkxhYmVsLmlubmVyVGV4dCA9IFwiUGxlYXNlIGVudGVyIGEgZGVzY3JpcHRpb24gb2YgdGhlIHRvZG9cIjtcclxuXHJcbiAgICBjb25zdCBkdWVEYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBkdWVEYXRlSW5wdXQudHlwZSA9IFwiZGF0ZVwiO1xyXG4gICAgY29uc3QgZHVlRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgZHVlRGF0ZUxhYmVsLmlubmVyVGV4dCA9IFwiUGxlYXNlIGVudGVyIHRoZSBkdWUgZGF0ZSBvZiB0aGUgdG9kb1wiO1xyXG5cclxuICAgIGNvbnN0IHByaW9yaXR5SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBwcmlvcml0eUlucHV0LnR5cGUgPSBcInJhbmdlXCJcclxuICAgIHByaW9yaXR5SW5wdXQubWluID0gXCIxXCJcclxuICAgIHByaW9yaXR5SW5wdXQubWF4ID0gXCIxMFwiXHJcbiAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgcHJpb3JpdHlMYWJlbC5pbm5lclRleHQgPSBcIlBsZWFzZSBlbnRlciB0aGUgcHJpb3JpdHkgb2YgdGhlIHRvZG8gZnJvbSAxIHRvIDEwLCAxIGJlaW5nIG1vc3QgaW1wb3J0YW50IHdpdGggMTAgYmVpbmcgbGVhc3QgaW1wb3J0YW50XCI7XHJcblxyXG4gICAgY29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGNvbnN0IHByb2plY3ROYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBwcm9qZWN0TmFtZUxhYmVsLmlubmVyVGV4dCA9XHJcbiAgICAgIFwiUGxlYXNlIGVudGVyIHRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0IGZvciB0aGUgdG9kbyB0byBnbyBvbiBcIjtcclxuXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU3VibWl0IG5ldyBUb2RvIVwiO1xyXG4gICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNyZWF0ZVRvZG8oXHJcbiAgICAgICAgdGl0bGVJbnB1dC52YWx1ZSxcclxuICAgICAgICBkZXNjcmlwdGlvbklucHV0LnZhbHVlLFxyXG4gICAgICAgIGR1ZURhdGVJbnB1dC52YWx1ZUFzRGF0ZSxcclxuICAgICAgICBwcmlvcml0eUlucHV0LnZhbHVlLFxyXG4gICAgICAgIHByb2plY3ROYW1lSW5wdXQudmFsdWVcclxuICAgICAgKTtcclxuICAgICAgY3JlYXRlVG9kb0NvbnRhaW5lci5yZW1vdmVDaGlsZChmb3JtKTtcclxuICAgICAgdG9kb0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpXHJcbiAgICAgIGNsZWFyVG9kb0RvbSgpO1xyXG4gICAgICBzaG93VG9kb0RvbSgpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGZvcm0uYXBwZW5kQ2hpbGQodGl0bGVMYWJlbCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKHRpdGxlSW5wdXQpO1xyXG4gICAgZm9ybS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcclxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25JbnB1dCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKGR1ZURhdGVMYWJlbCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKGR1ZURhdGVJbnB1dCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xyXG4gICAgZm9ybS5hcHBlbmRDaGlsZChwcmlvcml0eUlucHV0KTtcclxuICAgIGZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdE5hbWVMYWJlbCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKHByb2plY3ROYW1lSW5wdXQpO1xyXG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xyXG4gICAgY3JlYXRlVG9kb0NvbnRhaW5lci5hcHBlbmRDaGlsZChmb3JtKTtcclxuICB9KTtcclxuXHJcbiAgY3JlYXRlVG9kb0NvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVUb2RvQnV0dG9uKTtcclxufTtcclxuY3JlYXRlVG9kb0RvbSgpO1xyXG5cclxuY29uc3QgY3JlYXRlVG9kbyA9ICh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBwcm9qZWN0TmFtZSkgPT4ge1xyXG4gIGNvbnN0IHRvZG8gPSBuZXcgVG9kbyhcclxuICAgIHRpdGxlLFxyXG4gICAgZGVzY3JpcHRpb24sXHJcbiAgICBuZXcgRGF0ZSgpLFxyXG4gICAgZHVlRGF0ZSxcclxuICAgIHByaW9yaXR5LFxyXG4gICAgZmFsc2UsXHJcbiAgICBwcm9qZWN0TmFtZVxyXG4gICk7XHJcbiAgcHJvamVjdExpc3QuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xyXG4gICAgaWYgKHByb2plY3QubmFtZSA9PT0gcHJvamVjdE5hbWUpIHtcclxuICAgICAgcHJvamVjdC50b2Rvc0xpc3QucHVzaCh0b2RvKTtcclxuICAgIH1cclxuICB9KTtcclxuICBjb25zb2xlLmxvZyhwcm9qZWN0TGlzdCk7XHJcbiAgY2xlYXJUb2RvRG9tKCk7XHJcbiAgc2hvd1RvZG9Eb20oKTtcclxufTtcclxuXHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJwcm9qZWN0Q29udGFpbmVyIiwidG9kb0NvbnRhaW5lciIsImNyZWF0ZVRvZG9Db250YWluZXIiLCJUb2RvIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImNyZWF0aW9uRGF0ZSIsImR1ZURhdGUiLCJwcmlvcml0eSIsInN0YXR1cyIsInByb2plY3QiLCJjaGFuZ2VTdGF0dXMiLCJQcm9qZWN0IiwidG9kb3NMaXN0Iiwic2VsZWN0ZWQiLCJzZWxlY3QiLCJjbGVhclRvZG9Eb20iLCJzaG93VG9kb0RvbSIsImRlU2VsZWN0IiwibmV3VG9kbyIsIkRhdGUiLCJuZXdUb2RvMSIsIm5ld1RvZG8yIiwicHJvamVjdExpc3QiLCJmb3JFYWNoIiwidG9kbyIsInRvZG9UaXRsZUVsIiwidG9kb0Rlc2NFbCIsInRvZG9EdWVEYXRlRWwiLCJ0b2RvUHJpb3JpdHlFbCIsInRvZG9TdGF0dXNFbCIsImRlbGV0ZUJ0bkVsIiwiY29uc29sZSIsImxvZyIsImlubmVySFRNTCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVUb2RvRG9tIiwicmVtb3ZlVG9kbyIsImlubmVyVGV4dCIsImNsYXNzTGlzdCIsImFkZCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInNob3dQcm9qZWN0TGlzdERvbSIsInByb2plY3RMaXN0RWwiLCJwcm9qZWN0TmFtZUVsIiwic2VsZWN0UHJvamVjdERvbSIsImNoaWxkTm9kZXMiLCJub2RlIiwic2V0UHJvamVjdEFzRGVzZWxlY3RlZCIsInNldFByb2plY3RBc1NlbGVjdGVkIiwicHJvamVjdE5hbWUiLCJjcmVhdGVQcm9qZWN0RG9tIiwiY3JlYXRlUHJvamVjdEJ1dHRvbiIsImZvcm0iLCJwcm9qZWN0TmFtZUlucHV0IiwicHJvamVjdE5hbWVMYWJlbCIsInByb2plY3RTdWJtaXRCdXR0b24iLCJodG1sRm9yIiwicHJldmVudERlZmF1bHQiLCJjcmVhdGVQcm9qZWN0IiwiY3JlYXRlVG9kb0J1dHRvbiIsInRpdGxlSW5wdXQiLCJ0aXRsZUxhYmVsIiwiZGVzY3JpcHRpb25JbnB1dCIsImRlc2NyaXB0aW9uTGFiZWwiLCJkdWVEYXRlSW5wdXQiLCJ0eXBlIiwiZHVlRGF0ZUxhYmVsIiwicHJpb3JpdHlJbnB1dCIsIm1pbiIsIm1heCIsInByaW9yaXR5TGFiZWwiLCJzdWJtaXRCdXR0b24iLCJjcmVhdGVUb2RvIiwidmFsdWVBc0RhdGUiLCJjcmVhdGVUb2RvRG9tIl0sInNvdXJjZVJvb3QiOiIifQ==